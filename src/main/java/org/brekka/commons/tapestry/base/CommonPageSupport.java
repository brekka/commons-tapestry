package org.brekka.commons.tapestry.base;

import static java.lang.String.format;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import org.apache.commons.lang3.StringUtils;
import org.apache.tapestry5.ComponentResources;
import org.apache.tapestry5.ioc.Messages;
import org.apache.tapestry5.ioc.annotations.Inject;

/**
 * Provides methods that are useful for most pages.
 * 
 * @author Andrew Taylor
 */
public abstract class CommonPageSupport {
    
    /**
     * Useful for accessing locale, message bundles etc.
     */
    @Inject
    private ComponentResources resources;
    
    /**
     * Generate a title that should appear in the html/head 'title' element. This is normally passed
     * directly to the 'title' attribute at the top of the 'tml' template file. It is important that
     * this title not contain any HTML characters as the browser title is plaintext only.
     * 
     * The value returned will be the result of a messages lookup for the key "Page.[Name].title" where
     * [Name] is the simple name of the concrete class. The method {@link #formatTitle(String, Messages)} performs
     * the actual call to the messages bundle, so it can be overridden to include page-specific parameters to the 
     * format method.
     * 
     * @return the title that should appear for the head.
     */
    public String getHeadTitle() {
        Messages messages = resources.getMessages();
        String autoTitleKey = format("Page.%s.title", getClass().getSimpleName());
        return formatTitle(autoTitleKey, messages);
    }
    
    public String getPageIdentifier() {
        String pageName = StringUtils.capitalize(resources.getPageName().replaceAll("/", ""));
        String pageIdentifier = formatPageIdentifier(pageName);
        try {
            pageIdentifier = URLEncoder.encode(pageIdentifier, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e);
        }
        return pageIdentifier;
    }
    
    protected String formatPageIdentifier(String pageName) {
        return pageName;
    }
    
    /**
     * Retrieve the title that should be used in the main title of the page. It is normally included within 
     * 'h1' tags just below the 'html' element of a 'tml' template. This title can include html markup if
     * required.
     * 
     * By default this method returns the same title generated by {@link #getHeadTitle()}. It can be overridden to
     * return something completely different, or simply not used at all.
     * 
     * @return a title suitable for display within the body of an HTML page.
     */
    public String getTitle() {
        return getHeadTitle();
    }
    
    /**
     * Perform the retrieval and formatting of a title key that will be used by the {@link #getHeadTitle()} method.
     * The default implementation can be overridden to provide custom formatting of the key value such as including
     * page-specific parameters.
     * 
     * @param pageTitleKey the key to resolve in the messages file which is based on the page name.
     * @param messages the message bundle in which to find the localized string corresponding to the key.
     * @return the title as a string that does not contain any HTML markup.
     */
    protected String formatTitle(String pageTitleKey, Messages messages) {
        return messages.get(pageTitleKey);
    }
}
